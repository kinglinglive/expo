{"version":3,"file":"getStateFromPath-forks.js","sourceRoot":"","sources":["../../src/fork/getStateFromPath-forks.ts"],"names":[],"mappings":";;;AAEA,SAAgB,iBAAiB,CAAC,KAAkB,EAAE,MAAc;IAClE,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,MAAM,CAAwB,CAAC;IACvF,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAClD,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;gBACzC,OAAO,CAAC,IAAI,CACV,WAAW,KAAK,CAAC,IAAI,iBAAiB,IAAI,qEAAqE,CAChH,CAAC;aACH;SACF;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACzB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YAC3B,SAAS;SACV;KACF;IAED,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1C,OAAO,KAAK,CAAC,MAAM,CAAC;KACrB;AACH,CAAC;AApBD,8CAoBC;AAED,SAAgB,gBAAgB,CAC9B,IAAY,EACZ,WAAoD,EACpD,IAAa;IAEb,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC,YAAY,CAAC;IACzE,MAAM,MAAM,GAAsC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEtE,IAAI,IAAI,EAAE;QACR,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KACpB;IAED,KAAK,MAAM,IAAI,IAAI,YAAY,CAAC,IAAI,EAAE,EAAE;QACtC,MAAM,MAAM,GAAG,WAAW,EAAE,cAAc,CAAC,IAAI,CAAC;YAC9C,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;YACpE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE9B,wCAAwC;QACxC,2FAA2F;QAC3F,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;KACzD;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AACzD,CAAC;AAvBD,4CAuBC","sourcesContent":["import type { ParsedRoute } from './getStateFromPath';\n\nexport function mutateRouteParams(route: ParsedRoute, params: object) {\n  route.params = Object.assign(Object.create(null), route.params) as Record<string, any>;\n  for (const [name, value] of Object.entries(params)) {\n    if (route.params?.[name]) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`\n        );\n      }\n    }\n\n    if (!route.params?.[name]) {\n      route.params[name] = value;\n      continue;\n    }\n  }\n\n  if (Object.keys(route.params).length === 0) {\n    delete route.params;\n  }\n}\n\nexport function parseQueryParams(\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>,\n  hash?: string\n) {\n  const searchParams = new URL(path, 'https://phony.example').searchParams;\n  const params: Record<string, string | string[]> = Object.create(null);\n\n  if (hash) {\n    params['#'] = hash;\n  }\n\n  for (const name of searchParams.keys()) {\n    const values = parseConfig?.hasOwnProperty(name)\n      ? searchParams.getAll(name).map((value) => parseConfig[name](value))\n      : searchParams.getAll(name);\n\n    // searchParams.getAll returns an array.\n    // if we only have a single value, and its not an array param, we need to extract the value\n    params[name] = values.length === 1 ? values[0] : values;\n  }\n\n  return Object.keys(params).length ? params : undefined;\n}\n"]}